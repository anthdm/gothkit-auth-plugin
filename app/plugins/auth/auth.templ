package auth

import (
	"auth/app/views/layouts"
	v "github.com/anthdm/gothkit/validate"
	"auth/app/views/components"
)

type AuthIndexPageData struct {
	FormValues LoginFormValues
	FormErrors v.Errors
}

type LoginFormValues struct {
	Email    string `form:"email"`
	Password string `form:"password"`
}

templ AuthIndex(data AuthIndexPageData) {
	@layouts.BaseLayout() {
		<div class="fixed top-6 right-6">
			@components.ThemeSwitcher()
		</div>
		<div class="w-full justify-center gap-10">
			<div class="mt-10 lg:mt-40">
				<div class="max-w-sm mx-auto border rounded-md shadow-sm py-12 px-8 flex flex-col gap-8">
					<h2 class="text-center text-2xl font-medium">Login to Gothkit</h2>
					@LoginForm(data.FormValues, data.FormErrors)
					<a class="text-sm underline" href="/signup">Don't have an account? Signup here.</a>
				</div>
			</div>
		</div>
	}
}

templ LoginForm(values LoginFormValues, errors v.Errors) {
	<form hx-post="/login" class="flex flex-col gap-4">
		<div class="flex flex-col gap-1">
			<label for="email">Email *</label>
			<input { inputAttrs(errors.Has("email"))... } name="email" id="email" value={ values.Email }/>
			if errors.Has("email") {
				<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="password">Password *</label>
			<input { inputAttrs(errors.Has("password"))... } type="password" name="password" id="password"/>
			if errors.Has("password") {
				<ul class="list-disc ml-4">
					for _, err := range errors.Get("password") {
						<li class="text-red-500 text-xs">{ err }</li>
					}
				</ul>
			}
		</div>
		<button { buttonAttrs()... }>
			Login
		</button>
	</form>
}

func buttonAttrs() templ.Attributes {
	class := "inline-flex text-primary-foreground items-center justify-center px-4 py-2 text-sm tracking-wide transition-colors duration-200 rounded-md bg-primary text-foreground hover:bg-primary/90 focus:ring focus:ring-primary focus:shadow-outline focus:outline-none"
	return templ.Attributes{
		"class": class,
	}
}

func inputAttrs(hasError bool) templ.Attributes {
	class := "flex w-full px-3 py-2 bg-transparent text-sm border rounded-md ring-offset-background placeholder:text-neutral-500 focus:border-neutral-300 focus:outline-none focus:ring focus:ring-offset-1 focus:ring-neutral-400 disabled:cursor-not-allowed disabled:opacity-50"
	if hasError {
		class += " border-red-500"
	} else {
		class += " border-input"
	}
	return templ.Attributes{
		"class": class,
	}
}
